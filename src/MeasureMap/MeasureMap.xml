<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MeasureMap</name>
    </assembly>
    <members>
        <member name="T:MeasureMap.AssertionException">
            <summary>
            Exception that is thrown when a condition is not met
            </summary>
        </member>
        <member name="M:MeasureMap.AssertionException.#ctor(System.String)">
            <summary>
            Exception that is thrown when a condition is not met
            </summary>
            <param name="message">The message of the exception</param>
        </member>
        <member name="T:MeasureMap.Diagnostics.ILogger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="M:MeasureMap.Diagnostics.ILogger.Write(System.String,MeasureMap.Diagnostics.LogLevel,System.String)">
            <summary>
            Write a message to the log
            </summary>
            <param name="message"></param>
            <param name="level"></param>
            <param name="source"></param>
        </member>
        <member name="T:MeasureMap.Diagnostics.ILogWriter">
            <summary>
            The LogWriter interface
            </summary>
        </member>
        <member name="M:MeasureMap.Diagnostics.ILogWriter.Write(System.String,MeasureMap.Diagnostics.LogLevel,System.String)">
            <summary>
            Writes the message to the logdestination
            </summary>
            <param name="message"></param>
            <param name="level"></param>
            <param name="source"></param>
        </member>
        <member name="T:MeasureMap.Diagnostics.Logger">
            <inheritdoc />
        </member>
        <member name="M:MeasureMap.Diagnostics.Logger.#ctor">
            <inheritdoc />
        </member>
        <member name="M:MeasureMap.Diagnostics.Logger.Write(System.String,MeasureMap.Diagnostics.LogLevel,System.String)">
            <inheritdoc />
        </member>
        <member name="M:MeasureMap.Diagnostics.Logger.Setup">
            <summary>
            Create a new logger
            </summary>
            <returns></returns>
        </member>
        <member name="T:MeasureMap.Diagnostics.LogLevel">
            <summary>
            The loglevel
            </summary>
        </member>
        <member name="F:MeasureMap.Diagnostics.LogLevel.Debug">
            <summary>
            
            </summary>
        </member>
        <member name="F:MeasureMap.Diagnostics.LogLevel.Info">
            <summary>
            
            </summary>
        </member>
        <member name="F:MeasureMap.Diagnostics.LogLevel.Warning">
            <summary>
            
            </summary>
        </member>
        <member name="F:MeasureMap.Diagnostics.LogLevel.Error">
            <summary>
            
            </summary>
        </member>
        <member name="F:MeasureMap.Diagnostics.LogLevel.Critical">
            <summary>
            
            </summary>
        </member>
        <member name="T:MeasureMap.Diagnostics.TraceLogWriter">
            <summary>
            Logwritert that writes all messages to the diagnostics console
            </summary>
        </member>
        <member name="M:MeasureMap.Diagnostics.TraceLogWriter.Write(System.String,MeasureMap.Diagnostics.LogLevel,System.String)">
            <inheritdoc />
        </member>
        <member name="T:MeasureMap.IExecutionContext">
            <summary>
            The context containing info to the execution run
            </summary>
        </member>
        <member name="P:MeasureMap.IExecutionContext.SessionData">
            <summary>
            The data store for the context
            </summary>
        </member>
        <member name="T:MeasureMap.ExecutionContext">
            <summary>
            The context containing info to the execution run
            </summary>
        </member>
        <member name="P:MeasureMap.ExecutionContext.SessionData">
            <summary>
            The data store for the context
            </summary>
        </member>
        <member name="T:MeasureMap.ExecutionContextExtensions">
            <summary>
            The extensions and logic for the execution context
            </summary>
        </member>
        <member name="M:MeasureMap.ExecutionContextExtensions.Get(MeasureMap.IExecutionContext,System.String)">
            <summary>
            Gets a value stored in the context
            </summary>
            <param name="context">The execution context</param>
            <param name="key">The key of the stored value</param>
            <returns></returns>
        </member>
        <member name="M:MeasureMap.ExecutionContextExtensions.Get``1(MeasureMap.IExecutionContext,System.String)">
            <summary>
            Gets a value stored in the context
            </summary>
            <param name="context">The execution context</param>
            <param name="key">The key of the stored value</param>
        </member>
        <member name="M:MeasureMap.ExecutionContextExtensions.Set(MeasureMap.IExecutionContext,System.String,System.Object)">
            <summary>
            Sets a value to the context
            </summary>
            <param name="context">The execution context</param>
            <param name="key">The key of the stored value</param>
            <param name="value">The value to store</param>
        </member>
        <member name="M:MeasureMap.ExecutionContextExtensions.Remove(MeasureMap.IExecutionContext,System.String)">
            <summary>
            Removes a value from the context
            </summary>
            <param name="context">The execution context</param>
            <param name="key">The key of the stored value</param>
        </member>
        <member name="M:MeasureMap.ExecutionContextExtensions.Clear(MeasureMap.IExecutionContext)">
            <summary>
            Cleares all values from the context
            </summary>
            <param name="context">The execution context</param>
        </member>
        <member name="T:MeasureMap.ContextKeys">
            <summary>
            General Context keys
            </summary>
        </member>
        <member name="F:MeasureMap.ContextKeys.Iteration">
            <summary>
            Iteration
            </summary>
        </member>
        <member name="F:MeasureMap.ContextKeys.ThreadId">
            <summary>
            ThreadId
            </summary>
        </member>
        <member name="F:MeasureMap.ContextKeys.ProcessId">
            <summary>
            ProcessId
            </summary>
        </member>
        <member name="T:MeasureMap.IIterationResult">
            <summary>
            Marks a iteration of a run Task
            </summary>
        </member>
        <member name="P:MeasureMap.IIterationResult.AfterExecution">
            <summary>
            The memory size after execution
            </summary>
        </member>
        <member name="P:MeasureMap.IIterationResult.AfterGarbageCollection">
            <summary>
            The memory size after GC
            </summary>
        </member>
        <member name="P:MeasureMap.IIterationResult.Data">
            <summary>
            Gets or sets the data that is returned by the Task. If no data is returned, the iteration is contained
            </summary>
        </member>
        <member name="P:MeasureMap.IIterationResult.Duration">
            <summary>
            Gets the Milliseconds that the iteration took to run the Task
            </summary>
        </member>
        <member name="P:MeasureMap.IIterationResult.InitialSize">
            <summary>
            The initial memory size
            </summary>
        </member>
        <member name="P:MeasureMap.IIterationResult.Ticks">
            <summary>
            Gets the Ticks that the iteration took to run the Task
            </summary>
        </member>
        <member name="P:MeasureMap.IIterationResult.TimeStamp">
            <summary>
            The timestamp of when the iteration was run
            </summary>
        </member>
        <member name="P:MeasureMap.IIterationResult.Iteration">
            <summary>
            Gets the current iteration
            </summary>
        </member>
        <member name="P:MeasureMap.IIterationResult.ThreadId">
            <summary>
            Gets the current thread
            </summary>
        </member>
        <member name="P:MeasureMap.IIterationResult.ProcessId">
            <summary>
            Gets the current process
            </summary>
        </member>
        <member name="T:MeasureMap.IterationResult">
            <summary>
            Marks a iteration of a run Task
            </summary>
        </member>
        <member name="M:MeasureMap.IterationResult.#ctor">
            <summary>
            Creates a object containing information on the iteration
            </summary>
        </member>
        <member name="P:MeasureMap.IterationResult.Ticks">
            <summary>
            Gets the Ticks that the iteration took to run the Task
            </summary>
        </member>
        <member name="P:MeasureMap.IterationResult.Duration">
            <summary>
            Gets the Milliseconds that the iteration took to run the Task
            </summary>
        </member>
        <member name="P:MeasureMap.IterationResult.TimeStamp">
            <summary>
            The timestamp of when the iteration was run
            </summary>
        </member>
        <member name="P:MeasureMap.IterationResult.AfterExecution">
            <summary>
            The memory size after execution
            </summary>
        </member>
        <member name="P:MeasureMap.IterationResult.AfterGarbageCollection">
            <summary>
            The memory size after GC
            </summary>
        </member>
        <member name="P:MeasureMap.IterationResult.InitialSize">
            <summary>
            The initial memory size
            </summary>
        </member>
        <member name="P:MeasureMap.IterationResult.Data">
            <summary>
            Gets or sets the data that is returned by the Task. If no data is returned, the iteration is contained
            </summary>
        </member>
        <member name="P:MeasureMap.IterationResult.Iteration">
            <summary>
            Gets the current iteration
            </summary>
        </member>
        <member name="P:MeasureMap.IterationResult.ThreadId">
            <summary>
            Gets the current thread
            </summary>
        </member>
        <member name="P:MeasureMap.IterationResult.ProcessId">
            <summary>
            Gets the current process
            </summary>
        </member>
        <member name="P:MeasureMap.ProfilerResult.ResultValues">
            <summary>
            Collection of all retun values
            </summary>
        </member>
        <member name="P:MeasureMap.ProfilerResult.Iterations">
            <summary>
            The iterations that were run
            </summary>
        </member>
        <member name="P:MeasureMap.ProfilerResult.Fastest">
            <summary>
            Gets the fastest iterations
            </summary>
        </member>
        <member name="P:MeasureMap.ProfilerResult.Slowest">
            <summary>
            Gets the slowest iterations
            </summary>
        </member>
        <member name="P:MeasureMap.ProfilerResult.AverageMilliseconds">
            <summary>
            Gets the average Milliseconds that all iterations took to run the task
            </summary>
        </member>
        <member name="P:MeasureMap.ProfilerResult.AverageTicks">
            <summary>
            Gets the average Ticks that all iterations took to run the task
            </summary>
        </member>
        <member name="P:MeasureMap.ProfilerResult.AverageTime">
            <summary>
            Gets the average time each iteration took
            </summary>
        </member>
        <member name="P:MeasureMap.ProfilerResult.TotalTime">
            <summary>
            Gets the total time for all iterations
            </summary>
        </member>
        <member name="P:MeasureMap.ProfilerResult.InitialSize">
            <summary>
            The initial memory size
            </summary>
        </member>
        <member name="P:MeasureMap.ProfilerResult.EndSize">
            <summary>
            The memory size after measure
            </summary>
        </member>
        <member name="P:MeasureMap.ProfilerResult.Increase">
            <summary>
            The increase in memory size
            </summary>
        </member>
        <member name="P:MeasureMap.ProfilerResult.Warmup">
            <summary>
            Duration of the warmup
            </summary>
        </member>
        <member name="T:MeasureMap.ProfilerResultExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:MeasureMap.ProfilerResultExtensions.Trace(MeasureMap.IProfilerResult,System.String)">
            <summary>
            Trace the result to the Console
            </summary>
        </member>
        <member name="M:MeasureMap.ProfilerResultExtensions.Trace(MeasureMap.IProfilerResult,System.Boolean,System.String)">
            <summary>
            Trace the result to the Console
            </summary>
        </member>
        <member name="M:MeasureMap.ProfilerResultExtensions.Warmup(MeasureMap.IProfilerResult)">
            <summary>
            Returns the timespan that the Warmup took
            </summary>
            <param name="result">The ProfilerResult</param>
            <returns>The timespan that the warmup took</returns>
        </member>
        <member name="M:MeasureMap.ProfilerResultExtensions.Elapsed(MeasureMap.IProfilerResult)">
            <summary>
            Returns the timespan that the complete Session took
            </summary>
            <param name="result">The ProfilerResult</param>
            <returns>The timespan that the session took</returns>
        </member>
        <member name="T:MeasureMap.ProfilerSession">
            <summary>
            TODO: Memorytests: http://www.codeproject.com/Articles/5171/Advanced-Unit-Testing-Part-IV-Fixture-Setup-Teardo
            </summary>
        </member>
        <member name="P:MeasureMap.ProfilerSession.Iterations">
            <summary>
            Gets the amount of iterations that the Task will be run
            </summary>
        </member>
        <member name="P:MeasureMap.ProfilerSession.SessionHandler">
            <summary>
            Gets the chain of handlers that get executed before the task execution
            </summary>
        </member>
        <member name="P:MeasureMap.ProfilerSession.TaskHandler">
            <summary>
            Gets the chain of handlers that get executed when running every task
            </summary>
        </member>
        <member name="M:MeasureMap.ProfilerSession.StartSession">
            <summary>
            Creates a new Session for profiling performance
            </summary>
            <returns>A profiler session</returns>
        </member>
        <member name="M:MeasureMap.ProfilerSession.SetIterations(System.Int32)">
            <summary>
            Sets the amount of iterations that the profileing session should run the task
            </summary>
            <param name="iterations">The iterations to run the task</param>
            <returns>The current profiling session</returns>
        </member>
        <member name="M:MeasureMap.ProfilerSession.SetThreads(System.Int32)">
            <summary>
            Sets the amount of threads that the profiling sessions should run in.
            All iterations are run on every thread.
            </summary>
            <param name="thredCount">The amount of threads that the task is run on</param>
            <returns>The current profiling session</returns>
        </member>
        <member name="M:MeasureMap.ProfilerSession.Task(MeasureMap.ITask)">
            <summary>
            Sets the Taskrunner that will be profiled
            </summary>
            <param name="runner">The runner containig the task</param>
            <returns>The current profiling session</returns>
        </member>
        <member name="M:MeasureMap.ProfilerSession.AddCondition(System.Func{MeasureMap.IResult,System.Boolean})">
            <summary>
            Adds a condition to the profiling session
            </summary>
            <param name="condition">The condition that will be checked</param>
            <returns>The current profiling session</returns>
        </member>
        <member name="M:MeasureMap.ProfilerSession.RunSession">
            <summary>
            Starts the profiling session
            </summary>
            <returns>The resulting profile</returns>
        </member>
        <member name="T:MeasureMap.ProfilerSessionExtensions">
            <summary>
            Extension class for ProfilerSession
            </summary>
        </member>
        <member name="M:MeasureMap.ProfilerSessionExtensions.Task(MeasureMap.ProfilerSession,System.Action)">
            <summary>
            Sets the Task that will be profiled
            </summary>
            <param name="session">The current session</param>
            <param name="task">The Task</param>
            <returns>The current profiling session</returns>
        </member>
        <member name="M:MeasureMap.ProfilerSessionExtensions.Task``1(MeasureMap.ProfilerSession,System.Func{``0,``0})">
            <summary>
            Sets the Task that will be profiled
            </summary>
            <param name="session">The current session</param>
            <typeparam name="T">The return and parameter value</typeparam>
            <param name="task">The task to execute</param>
            <returns>The current profiling session</returns>
        </member>
        <member name="M:MeasureMap.ProfilerSessionExtensions.Task``1(MeasureMap.ProfilerSession,System.Func{``0,``0},``0)">
            <summary>
            Sets the Task that will be profiled
            </summary>
            <param name="session">The current session</param>
            <typeparam name="T">The return and parameter value</typeparam>
            <param name="task">The task to execute</param>
            <param name="parameter">The parameter that is passed to the task</param>
            <returns>The current profiling session</returns>
        </member>
        <member name="M:MeasureMap.ProfilerSessionExtensions.Task(MeasureMap.ProfilerSession,System.Action{MeasureMap.IExecutionContext})">
            <summary>
            Sets the Task that will be profiled passing the current ExecutionContext as parameter
            </summary>
            <param name="session">The current session</param>
            <param name="task">The task to execute</param>
            <returns>The current profiling session</returns>
        </member>
        <member name="M:MeasureMap.ProfilerSessionExtensions.Task``1(MeasureMap.ProfilerSession,System.Func{MeasureMap.IExecutionContext,``0})">
            <summary>
            Sets the Task that will be profiled passing the current ExecutionContext as parameter
            </summary>
            <typeparam name="T">The expected task output</typeparam>
            <param name="session">The current session</param>
            <param name="task">The task to execute</param>
            <returns>The current profiling session</returns>
        </member>
        <member name="M:MeasureMap.ProfilerSessionExtensions.PreExecute(MeasureMap.ProfilerSession,System.Action)">
            <summary>
            Sets a Task that will be executed before each profiling task execution
            </summary>
            <param name="session">The current session</param>
            <param name="task">The task to execute before each profiling task</param>
            <returns>The current profiling session</returns>
        </member>
        <member name="M:MeasureMap.ProfilerSessionExtensions.PreExecute(MeasureMap.ProfilerSession,System.Action{MeasureMap.IExecutionContext})">
            <summary>
            Sets a Task that will be executed before each profiling task execution
            </summary>
            <param name="session">The current session</param>
            <param name="task">The task to execute before each profiling task</param>
            <returns>The current profiling session</returns>
        </member>
        <member name="M:MeasureMap.ProfilerSessionExtensions.PostExecute(MeasureMap.ProfilerSession,System.Action)">
            <summary>
            Sets a Task that will be executed after each profiling task execution
            </summary>
            <param name="session">The current session</param>
            <param name="task">The task to execute after each profiling task</param>
            <returns>The current profiling session</returns>
        </member>
        <member name="M:MeasureMap.ProfilerSessionExtensions.PostExecute(MeasureMap.ProfilerSession,System.Action{MeasureMap.IExecutionContext})">
            <summary>
            Sets a Task that will be executed after each profiling task execution
            </summary>
            <param name="session">The current session</param>
            <param name="task">The task to execute after each profiling task</param>
            <returns>The current profiling session</returns>
        </member>
        <member name="T:MeasureMap.Result">
            <summary>
            Represents the result of a profiled session
            </summary>
        </member>
        <member name="M:MeasureMap.Result.#ctor">
            <summary>
            Creates a result of the profiled session
            </summary>
        </member>
        <member name="P:MeasureMap.Result.ResultValues">
            <summary>
            Collection of all retun values
            </summary>
        </member>
        <member name="P:MeasureMap.Result.Iterations">
            <summary>
            The iterations that were run
            </summary>
        </member>
        <member name="P:MeasureMap.Result.Fastest">
            <summary>
            Gets the fastest iterations
            </summary>
        </member>
        <member name="P:MeasureMap.Result.Slowest">
            <summary>
            Gets the slowest iterations
            </summary>
        </member>
        <member name="P:MeasureMap.Result.AverageMilliseconds">
            <summary>
            Gets the average Milliseconds that all iterations took to run the task
            </summary>
        </member>
        <member name="P:MeasureMap.Result.AverageTicks">
            <summary>
            Gets the average Ticks that all iterations took to run the task
            </summary>
        </member>
        <member name="P:MeasureMap.Result.AverageTime">
            <summary>
            Gets the average time each iteration took
            </summary>
        </member>
        <member name="P:MeasureMap.Result.TotalTime">
            <summary>
            Gets the total time for all iterations
            </summary>
        </member>
        <member name="P:MeasureMap.Result.InitialSize">
            <summary>
            The initial memory size
            </summary>
        </member>
        <member name="P:MeasureMap.Result.EndSize">
            <summary>
            The memory size after measure
            </summary>
        </member>
        <member name="P:MeasureMap.Result.Increase">
            <summary>
            The increase in memory size
            </summary>
        </member>
        <member name="P:MeasureMap.Result.Warmup">
            <summary>
            Duration of the warmup
            </summary>
        </member>
        <member name="T:MeasureMap.ElapsedTimeSessionHandler">
            <summary>
            TaskExecutor that measures the total elapsed time
            </summary>
        </member>
        <member name="M:MeasureMap.ElapsedTimeSessionHandler.Execute(MeasureMap.ITask,System.Int32)">
            <summary>
            Executes the task
            </summary>
            <param name="task">The task to run</param>
            <param name="iterations">The iterations to run the task</param>
            <returns>The resulting collection of the executions</returns>
        </member>
        <member name="T:MeasureMap.ISessionHandler">
            <summary>
            Chain of responsibility for executing tasks
            </summary>
        </member>
        <member name="M:MeasureMap.ISessionHandler.SetNext(MeasureMap.ISessionHandler)">
            <summary>
            Set the next execution item
            </summary>
            <param name="next">The next handler for the session</param>
        </member>
        <member name="M:MeasureMap.ISessionHandler.Execute(MeasureMap.ITask,System.Int32)">
            <summary>
            Executes the task
            </summary>
            <param name="task">The task to run</param>
            <param name="iterations">The iterations to run the task</param>
            <returns>The resulting collection of the executions</returns>
        </member>
        <member name="T:MeasureMap.SessionHandler">
            <summary>
            Baseclass for Chain of responsibility for executing tasks
            </summary>
        </member>
        <member name="M:MeasureMap.SessionHandler.SetNext(MeasureMap.ISessionHandler)">
            <summary>
            Set the next execution item
            </summary>
            <param name="next">The next handler for the session</param>
        </member>
        <member name="M:MeasureMap.SessionHandler.Execute(MeasureMap.ITask,System.Int32)">
            <summary>
            Executes the task
            </summary>
            <param name="task">The task to run</param>
            <param name="iterations">The iterations to run the task</param>
            <returns>The resulting collection of the executions</returns>
        </member>
        <member name="T:MeasureMap.IThreadSessionHandler">
            <summary>
            defines a mechanism to execute the task
            </summary>
        </member>
        <member name="T:MeasureMap.ThreadSessionHandler">
            <summary>
            A single threaded task session handler
            </summary>
        </member>
        <member name="M:MeasureMap.ThreadSessionHandler.Execute(MeasureMap.ITask,System.Int32)">
            <summary>
            Executes the task on a single thread
            </summary>
            <param name="task">The task to run</param>
            <param name="iterations">The iterations to run the task</param>
            <returns>The resulting collection of the executions</returns>
        </member>
        <member name="T:MeasureMap.MultyThreadSessionHandler">
            <summary>
            A multy threaded task session handler
            </summary>
        </member>
        <member name="M:MeasureMap.MultyThreadSessionHandler.#ctor(System.Int32)">
            <summary>
            Creates a new threaded task executor
            </summary>
            <param name="threadCount">The amount of threads to run the task</param>
        </member>
        <member name="M:MeasureMap.MultyThreadSessionHandler.Execute(MeasureMap.ITask,System.Int32)">
            <summary>
            Executes the task on multiple threads
            </summary>
            <param name="task">The task to run</param>
            <param name="iterations">The iterations to run the task</param>
            <returns>The resulting collection of the executions</returns>
        </member>
        <member name="T:MeasureMap.IWarmupSessionHandler">
            <summary>
            Warmup for the task
            </summary>
        </member>
        <member name="T:MeasureMap.WarmupSessionHandler">
            <summary>
            Warmup for the task
            </summary>
        </member>
        <member name="M:MeasureMap.WarmupSessionHandler.#ctor">
            <summary>
            Creates an instance of the WarmupSessionHandler
            </summary>
        </member>
        <member name="M:MeasureMap.WarmupSessionHandler.Execute(MeasureMap.ITask,System.Int32)">
            <summary>
            Executes a warmup for the task
            </summary>
            <param name="task">The task to run</param>
            <param name="iterations">The iterations to run the task</param>
            <returns>The resulting collection of the executions</returns>
        </member>
        <member name="T:MeasureMap.ITask">
            <summary>
            Defines a task that will be run
            </summary>
        </member>
        <member name="M:MeasureMap.ITask.Run(MeasureMap.IExecutionContext)">
            <summary>
            Executes the task
            </summary>
            <param name="context">The current execution context</param>
            <returns>The resulting collection of the executions</returns>
        </member>
        <member name="T:MeasureMap.Task">
            <summary>
            Defines a task that will be run
            </summary>
        </member>
        <member name="M:MeasureMap.Task.#ctor(System.Action)">
            <summary>
            Defines a task that will be run
            </summary>
        </member>
        <member name="M:MeasureMap.Task.Run(MeasureMap.IExecutionContext)">
            <summary>
            Executes the task
            </summary>
            <param name="context">The current execution context</param>
            <returns>The resulting collection of the executions</returns>
        </member>
        <member name="T:MeasureMap.ContextTask">
            <summary>
            Defines a task receiving a ExecutionContext that will be run
            </summary>
        </member>
        <member name="M:MeasureMap.ContextTask.#ctor(System.Action{MeasureMap.IExecutionContext})">
            <summary>
            Defines a task that will be run
            </summary>
        </member>
        <member name="M:MeasureMap.ContextTask.Run(MeasureMap.IExecutionContext)">
            <summary>
            Executes the task
            </summary>
            <param name="context">The current execution context</param>
            <returns>The resulting collection of the executions</returns>
        </member>
        <member name="T:MeasureMap.OutputTask`1">
            <summary>
            Defines a task that will be run
            </summary>
        </member>
        <member name="M:MeasureMap.OutputTask`1.#ctor(System.Func{MeasureMap.IExecutionContext,`0})">
            <summary>
            Defines a task that will be run
            </summary>
        </member>
        <member name="M:MeasureMap.OutputTask`1.Run(MeasureMap.IExecutionContext)">
            <summary>
            Executes the task
            </summary>
            <param name="context">The current execution context</param>
            <returns>The resulting collection of the executions</returns>
        </member>
        <member name="T:MeasureMap.Task`1">
            <summary>
            Defines a task that will be run
            </summary>
        </member>
        <member name="M:MeasureMap.Task`1.#ctor(System.Func{`0,`0})">
            <summary>
            Defines a task that will be run
            </summary>
        </member>
        <member name="M:MeasureMap.Task`1.#ctor(System.Func{`0,`0},`0)">
            <summary>
            Defines a task that will be run
            </summary>
        </member>
        <member name="M:MeasureMap.Task`1.Run(MeasureMap.IExecutionContext)">
            <summary>
            Executes the task
            </summary>
            <param name="context">The current execution context</param>
            <returns>The resulting collection of the executions</returns>
        </member>
        <member name="T:MeasureMap.TaskExecutionChain">
            <summary>
            Chain of responnsibility Manager for executing tasks
            </summary>
        </member>
        <member name="M:MeasureMap.TaskExecutionChain.SetNext(MeasureMap.ISessionHandler)">
            <summary>
            Set the next execution item
            </summary>
            <param name="next">The next executor</param>
        </member>
        <member name="M:MeasureMap.TaskExecutionChain.Execute(MeasureMap.ITask,System.Int32)">
            <summary>
            Executes the task
            </summary>
            <param name="task">The task to run</param>
            <param name="iterations">The iterations to run the task</param>
            <returns>The resulting collection of the executions</returns>
        </member>
        <member name="T:MeasureMap.TaskHandlerChain">
            <summary>
            Chain of responnsibility Manager for running tasks
            </summary>
        </member>
        <member name="M:MeasureMap.TaskHandlerChain.SetNext(MeasureMap.ITask)">
            <summary>
            Set the next execution item
            </summary>
            <param name="next">The next executor</param>
        </member>
        <member name="M:MeasureMap.TaskHandlerChain.Run(MeasureMap.IExecutionContext)">
            <summary>
            Executes the task
            </summary>
            <param name="context">The current execution context</param>
            <returns>The resulting collection of the executions</returns>
        </member>
        <member name="T:MeasureMap.ElapsedTimeTaskHandler">
            <summary>
            Taskhandler that measures the elapsed time for each profiling task execution
            </summary>
        </member>
        <member name="M:MeasureMap.ElapsedTimeTaskHandler.Run(MeasureMap.IExecutionContext)">
            <summary>
            Executes the task
            </summary>
            <param name="context">The current execution context</param>
            <returns>The resulting collection of the executions</returns>
        </member>
        <member name="T:MeasureMap.ITaskHandler">
            <summary>
            Represents a task handler that can be chained together with further task handlers
            </summary>
        </member>
        <member name="M:MeasureMap.ITaskHandler.SetNext(MeasureMap.ITask)">
            <summary>
            Set the next execution item
            </summary>
            <param name="next">The next executor</param>
        </member>
        <member name="T:MeasureMap.MemoryCollectionTaskHandler">
            <summary>
            Taskhandler that measures the memory before and after each profiling task execution
            </summary>
        </member>
        <member name="M:MeasureMap.MemoryCollectionTaskHandler.Run(MeasureMap.IExecutionContext)">
            <summary>
            Executes the task
            </summary>
            <param name="context">The current execution context</param>
            <returns>The resulting collection of the executions</returns>
        </member>
        <member name="M:MeasureMap.MemoryCollectionTaskHandler.ForceGarbageCollector">
            <summary>
            Forces the GC to run
            </summary>
        </member>
        <member name="T:MeasureMap.PostExecutionTaskHandler">
            <summary>
            Taskhandler that executes a task after each profiling task execution
            </summary>
        </member>
        <member name="M:MeasureMap.PostExecutionTaskHandler.#ctor(System.Action)">
            <summary>
            Creates a new taskhandler
            </summary>
            <param name="task">Task to execute after each profiling task execution</param>
        </member>
        <member name="M:MeasureMap.PostExecutionTaskHandler.#ctor(System.Action{MeasureMap.IExecutionContext})">
            <summary>
            Creates a new taskhandler
            </summary>
            <param name="task">Task to execute after each profiling task execution</param>
        </member>
        <member name="M:MeasureMap.PostExecutionTaskHandler.Run(MeasureMap.IExecutionContext)">
            <summary>
            Executes the task
            </summary>
            <param name="context">The current execution context</param>
            <returns>The resulting collection of the executions</returns>
        </member>
        <member name="T:MeasureMap.PreExecutionTaskHandler">
            <summary>
            Taskhandler that executes a task before each profiling task execution
            </summary>
        </member>
        <member name="M:MeasureMap.PreExecutionTaskHandler.#ctor(System.Action)">
            <summary>
            Creates a new taskhandler
            </summary>
            <param name="task">Task to execute before each profiling task execution</param>
        </member>
        <member name="M:MeasureMap.PreExecutionTaskHandler.#ctor(System.Action{MeasureMap.IExecutionContext})">
            <summary>
            Creates a new taskhandler
            </summary>
            <param name="task">Task to execute before each profiling task execution</param>
        </member>
        <member name="M:MeasureMap.PreExecutionTaskHandler.Run(MeasureMap.IExecutionContext)">
            <summary>
            Executes the task
            </summary>
            <param name="context">The current execution context</param>
            <returns>The resulting collection of the executions</returns>
        </member>
        <member name="T:MeasureMap.ProcessDataTaskHandler">
            <summary>
            Taskhandler that reads the current process and thread for each profiling task execution
            </summary>
        </member>
        <member name="M:MeasureMap.ProcessDataTaskHandler.Run(MeasureMap.IExecutionContext)">
            <summary>
            Executes the task
            </summary>
            <param name="context">The current execution context</param>
            <returns>The resulting collection of the executions</returns>
        </member>
        <member name="T:MeasureMap.TaskHandler">
            <summary>
            Base task handler containing logic for calling the next task in the chain
            </summary>
        </member>
        <member name="M:MeasureMap.TaskHandler.SetNext(MeasureMap.ITask)">
            <summary>
            Set the next execution item
            </summary>
            <param name="next">The next executor</param>
        </member>
        <member name="M:MeasureMap.TaskHandler.Run(MeasureMap.IExecutionContext)">
            <summary>
            Executes the task
            </summary>
            <param name="context">The current execution context</param>
            <returns>The resulting collection of the executions</returns>
        </member>
        <member name="M:MeasureMap.ThreadHelper.SetProcessor">
            <summary>
            Sets the process to run on second core with high priority
            </summary>
        </member>
        <member name="M:MeasureMap.ThreadHelper.SetThreadPriority">
            <summary>
            Sets the thread priority to highest
            </summary>
        </member>
        <member name="T:MeasureMap.Worker">
            <summary>
            A worker that runs the provided tasks
            </summary>
        </member>
        <member name="M:MeasureMap.Worker.#ctor">
            <summary>
            Creates a new instance of the worker
            </summary>
        </member>
        <member name="M:MeasureMap.Worker.Run(MeasureMap.ITask,System.Int32)">
            <summary>
            Runs the provided task for the iteration count
            </summary>
            <param name="task">The task that has to be run</param>
            <param name="iterations">The amount of iterations to run the task</param>
            <returns></returns>
        </member>
        <member name="M:MeasureMap.Worker.ForceGarbageCollector">
            <summary>
            Forces the GC to run
            </summary>
        </member>
    </members>
</doc>
